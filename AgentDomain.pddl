(define (domain detective-domain)

   (:predicates (ROOM ?x) (AGENT ?x) (KILLER ?x)
                (alive ?x) (died ?x)
                (in-room ?x ?y)
                (want-go-to ?x ?y)
                (thinks-is-a-killer ?x ?y)
                (found-evidence-against ?x ?y)
                (scared ?x) (angry-at ?x ?y)
                (explored-room ?x ?y)
                (contains-evidence ?x)
   )

(:action agent_move :parameters (?a ?room-from ?room-to)
:precondition (and (ROOM ?room-from) (ROOM ?room-to) (AGENT ?a)
                   (alive ?a) (not (scared ?a))
                   (in-room ?a ?room-from)
                   (not (died ?a)) (not (in-room ?a ?room-to)))
:effect (and (in-room ?a ?room-to)
             (not (in-room ?a ?room-from))))
             
(:action agent_move_to_targer :parameters (?a ?room-from ?room-to)
:precondition (and (ROOM ?room-from) (ROOM ?room-to) (AGENT ?a)
                   (alive ?a) (not (scared ?a))
                   (in-room ?a ?room-from)
                   (want-go-to ?a ?room-to)
                   (not (died ?a)) (not (in-room ?a ?room-to)))
:effect (and (in-room ?a ?room-to)
             (not (in-room ?a ?room-from))))
             
             
(:action to-be-a-witness :parameters (?a ?victim ?k ?place)
:precondition (and (ROOM ?place) (AGENT ?a) (KILLER ?k)
                   (alive ?a) (alive ?k) (died ?victim)
                   (in-room ?a ?place) (in-room ?victim ?place) (in-room ?k ?place)
               )
:effect (and (thinks-is-a-killer ?a ?k) (angry-at ?a ?k)
         )
)
             

(:action InvestigateRoom :parameters (?a ?place ?k)
:precondition (and (ROOM ?place) (KILLER ?k) (AGENT ?a)
                   (alive ?k) (alive ?a)
                   (in-room ?a ?place)
                   (not (explored-room ?a ?place))
                   (contains-evidence ?place)
               )
:effect (and (found-evidence-against ?a ?k) (thinks-is-a-killer ?a ?k) (angry-at ?a ?k) (explored-room ?a ?place)
         )
)

(:action tell-about-killer :parameters (?a1 ?a2 ?place ?k)
:precondition (and (ROOM ?place) (AGENT ?a1) (AGENT ?a2) (KILLER ?k)
                   (alive ?a1) (alive ?a2) (alive ?k)
                   (in-room ?a1 ?place) (in-room ?a2 ?place)
                   (found-evidence-against ?a1 ?k)
               )
:effect (and (thinks-is-a-killer ?a2 ?k) (angry-at ?a2 ?k)
         )
)

(:action NeutralizeKiller :parameters (?a ?k ?place)
:precondition (and (ROOM ?place) (KILLER ?k) (AGENT ?a)
                   (alive ?k) (alive ?a)
                   (in-room ?a ?place) (in-room ?k ?place)
                   (angry-at ?a ?k)
               )
:effect (and (died ?k) (not (alive ?k))
         )
)

(:action Fight :parameters (?a1 ?a2 ?place)
:precondition (and (ROOM ?place) (AGENT ?a1) (AGENT ?a2)
                   (alive ?a1) (alive ?a2)
                   (in-room ?a1 ?place) (in-room ?a2 ?place)
                   (angry-at ?a1 ?a2)
               )
:effect (and (died ?a2) (not (alive ?a2))
         )
)

(:action Reassure :parameters (?a1 ?a2 ?a3 ?k ?place)
:precondition (and (ROOM ?place) (AGENT ?a1) (AGENT ?a2) (AGENT ?a3) (KILLER ?k)
                   (alive ?a1) (alive ?a2)
                   (in-room ?a1 ?place) (in-room ?a2 ?place)
                   (or (angry-at ?a1 ?a3) (angry-at ?a1 ?k))
                   (not (thinks-is-a-killer ?a2 ?k))
               )
:effect (and (not (angry-at ?a1 ?a3)) (not (angry-at ?a1 ?k))
         )
)

(:action NothingToDo :parameters (?a1)
:precondition (and (AGENT ?a1)
                   (alive ?a1)
               )
:effect (alive ?a1)
)

(:action Run :parameters (?a ?room-from ?room-to)
:precondition (and (ROOM ?room-from) (ROOM ?room-to) (AGENT ?a)
                   (alive ?a) (scared ?a)
                   (in-room ?a ?room-from)
                   (not (died ?a)) (not (in-room ?a ?room-to)))
:effect (and (in-room ?a ?room-to)
             (not (in-room ?a ?room-from))))


)