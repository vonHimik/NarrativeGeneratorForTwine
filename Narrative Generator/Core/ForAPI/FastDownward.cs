using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace Narrative_Generator
{
    /// <summary>
    /// Class that controls the launch of the planner and the primary processing of its output.
    /// </summary>
    class FastDownward
    {
        /// <summary>
        /// Wrapper object.
        /// </summary>
        FastDownwardWrapper wrapper;
        /// <summary>
        /// An indicator of the success or failure of the plan.
        /// </summary>
        public bool isSuccess;

        /// <summary>
        /// Constructor without parameters.
        /// </summary>
        public FastDownward()
        {
            wrapper = new FastDownwardWrapper();
            isSuccess = false;
        }

        /// <summary>
        /// The method that starts the planner.
        /// </summary>
        /// <param name="domainFileName">The name of the file containing the planning domain.</param>
        /// <param name="problemFileName">The name of the file containing the planning problem.</param>
        /// <param name="note">Text to display on the main screen.</param>
        public void Run (string domainFileName, string problemFileName, ref TextBox note)
        {
            note.Text = "RUN FASTDOWNWARD";

            if (wrapper.RunFastDownward(domainFileName + ".pddl", problemFileName + ".pddl", ref note)) { isSuccess = true;}
            else { isSuccess = false; }
        }

        /// <summary>
        /// A method that reads a plan from a file generated by the planner.
        /// </summary>
        /// <param name="readedPlan">The object into which the plan is written.</param>
        /// <param name="state">The current state of the world.</param>
        /// <param name="note">Text to display on the main screen.</param>
        public void GetResultPlan (ref Plan readedPlan, WorldDynamic state, ref TextBox note)
        {
            note.Text = "RESULTING PLAN READING";


            // The variable into which the name of the read action will be written.
            string actionName = null;

            // A variable that stores a list of readed parameters for the action.
            List<string> parameters = new List<string>();

            try
            {
                // We open the stream for reading from the specified file.
                using (StreamReader streamReader = new StreamReader("sas_plan", Encoding.Default))
                {
                    // The variable into which we will write each read word.
                    string word = "";

                    // A flag to be raised when reading a line.
                    bool startLineReading = false;

                    // Flag indicating that the action name has been read.
                    bool haveName = false;

                    // Until we finish reading from the document.
                    while (!streamReader.EndOfStream)
                    {
                        // We read the symbol.
                        char c = (char)streamReader.Read();

                        // If it is an open parenthesis, then we understand that a new line has begun.
                        if (c == '(') { startLineReading = true; }
                        // Otherwise, if it is a closing parenthesis, then we understand that the line has ended.
                        else if (c == ')')
                        {
                            // We remove all flags.
                            startLineReading = false;
                            haveName = false;

                            // Add the read word to the list of parameters.
                            parameters.Add(word);

                            // We clear the variable with the read word.
                            word = "";

                            // Add the read action and its parameters to the plan.
                            readedPlan.AddAction(actionName, parameters, state);

                            // We clear the variable storing the name of the action.
                            actionName = null;

                            // We also clear the list of action parameters.
                            parameters.Clear();
                        }
                        // If we read the semicolon, then we understand that we have reached the end of the plan, and we complete the reading.
                        else if (c == ';') { break; }
                        // If we read the space, then we understand that we are between the words (the name of the action and its parameters).
                        else if (c == ' ')
                        {
                            // If the flag is already set to start reading a new line, and the name of the action has already been read earlier.
                            if (startLineReading && haveName)
                            {
                                // Add the read word to the list of parameters.
                                parameters.Add(word);

                                // And we clear the variable that stores the words.
                                word = "";
                            }
                            // If the flag of reading a new line is set, but the name of the action has not yet been read.
                            else if (startLineReading && !haveName)
                            {
                                // Then we copy the recorded word as the name of the action.
                                actionName = word;

                                // We clear the variable that stores the words.
                                word = "";

                                // And we set the flag that the name of the action is read.
                                haveName = true;
                            }
                        }
                        // If we read any other character, then we add it to the end of the variable with the word being read.
                        else
                        {
                            // If the flag is set to start reading a new line.
                            if (startLineReading)
                            {
                                word = word.Insert(word.Length, c.ToString());
                            }
                        }
                    }
                }
            }
            // We catch various exceptions, set the flag that the reading of the plan was unsuccessful, and exit the method.
            catch (FileNotFoundException e)
            {
                Console.WriteLine($"The file was not found: '{e}'");
                readedPlan.planReceived = false;
                DialogResult result = MessageBox.Show(
                    "The file with plan was not found",
                    "WARNING",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Warning,
                    MessageBoxDefaultButton.Button1,
                    MessageBoxOptions.DefaultDesktopOnly);

                if (result == DialogResult.OK)
                {
                    return;
                }
            }
            catch (DirectoryNotFoundException e)
            {
                Console.WriteLine($"The directory was not found: '{e}'");
                readedPlan.planReceived = false;
                DialogResult result = MessageBox.Show(
                    "The directory was not found",
                    "WARNING",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Warning,
                    MessageBoxDefaultButton.Button1,
                    MessageBoxOptions.DefaultDesktopOnly);

                if (result == DialogResult.OK)
                {
                    return;
                }
            }
            catch (IOException e)
            {
                Console.WriteLine($"The file could not be opened: '{e}'");
                readedPlan.planReceived = false;
                DialogResult result = MessageBox.Show(
                    "The file could not be opened",
                    "WARNING",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Warning,
                    MessageBoxDefaultButton.Button1,
                    MessageBoxOptions.DefaultDesktopOnly);

                if (result == DialogResult.OK)
                {
                    return;
                }
            }

            // In the end, if everything went well, then we set the flag that the plan was received.
            readedPlan.planReceived = true;
        }
    }
}
